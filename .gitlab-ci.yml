cache:
  paths:
  - node_modules

variables: {
    # used to create the build.json using nodejs
    BUILD_JSON_EVAL:
      "console.log(JSON.stringify({ branch: process.argv[1], commit: process.argv[2], pipeline: process.argv[3], date: process.argv[4], package: process.argv[5] || undefined, nsis: process.argv[6], deb: process.argv[7] }));"
}

stages:
  - build
  # - arch

build:
  stage: build
  # wine is used to create the windows build
  image: electronuserland/builder:wine
  script:
    # BUILD_JSON_EVAL variables
    - "VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')"
    - "DATE=$(date -u +%a', '%d' '%b' '%Y' '%T' GMT')"

    # URLS are used to tell auto-updaters the correct file for the that specified version
    - "NSIS_URL=null"
    # - "NSIS_URL=https://gitlab.com/herpproject/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/raw/public/$CI_PROJECT_NAME-Setup.exe?job=build"
    - "DEB_URL=https://gitlab.com/herpproject/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/raw/public/$CI_PROJECT_NAME.deb?job=build"
    - "TAR_URL=https://gitlab.com/herpproject/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/raw/public/$CI_PROJECT_NAME.tar.xz?job=build"

    # the builds supported by the app builtin update system
    - "DOWNLOAD_URLS=\"$NSIS_URL $DEB_URL\""

    # install dependencies & compile the code
    - "npm install"
    - "npm run compile"

    # build nsis installer for windows
    # - "echo $(node -e \"$BUILD_JSON_EVAL\" $CI_COMMIT_REF_NAME $CI_COMMIT_SHA $CI_PIPELINE_IID \"$DATE\" \"nsis\") > build.json"
    # - "npx electron-builder --win NSIS"

    # build debian package for linux
    - "echo $(node -e \"$BUILD_JSON_EVAL\" $CI_COMMIT_REF_NAME $CI_COMMIT_SHA $CI_PIPELINE_IID \"$DATE\" \"deb\") > build.json"
    - "npx electron-builder --linux deb"

    # build tar.xz package for linux
    - "echo $(node -e \"$BUILD_JSON_EVAL\" $CI_COMMIT_REF_NAME $CI_COMMIT_SHA $CI_PIPELINE_IID \"$DATE\") > build.json"
    - "npx electron-builder --linux tar.xz"

    # create the build.json that will be kept in the artifacts for the app builtin update system to use
    - "echo $(node -e \"$BUILD_JSON_EVAL\" $CI_COMMIT_REF_NAME $CI_COMMIT_SHA $CI_PIPELINE_IID \"\" \"\" $DOWNLOAD_URLS) > build.json"
  artifacts:
    # a year without a new builds would mean that the app is properly dead, and you properly shouldn't download it anyway
    expire_in: 12 mos
    paths:
      # - public/$CI_PROJECT_NAME-Setup.exe
      - public/$CI_PROJECT_NAME.deb
      - public/$CI_PROJECT_NAME.tar.xz
      - build.json
  # the branches that are valid for builds
  only:
    - development

# arch:
#   stage: arch
#   image: whynothugo/makepkg:latest
#   script:
#     # set variables
#     - "VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')"

#     # set access
#     - "echo \"$AUR_SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa"
#     - "ssh-add -K ~/.ssh/id_rsa"
#     - "git config user.name \"$GIT_USERNAME\""
#     - "git config user.email \"$GIT_EMAIL\""

#     # pull the current package info 
#     - "cd aur"
#     - "git fetch"
#     - "git pull"

#     # update the package info
#     - "echo \"$(head -n -3 PKGBUILD)\" > PKGBUILD"
#     - "echo \"pkgver=$VERSION\" >> PKGBUILD"
#     - "echo \"source=('icon.png' 'sulaiman.desktop' '$TAR_URL')\" >> PKGBUILD"
#     - "echo \"md5sums=('$(md5sum icon.png | awk '{print $1}')' '$(md5sum sulaiman.desktop | awk '{print $1}')' '$(md5sum ../public/Sulaiman.tar.xz | awk '{print $1}')')\" >> PKGBUILD"
#     - "makepkg --printsrcinfo > .SRCINFO"

#     - "echo \"-----------------------------now Reading PKGBUILD-----------------------\""
#     - "echo \"$(head -n -0 PKGBUILD)\""
#     - "echo \"-----------------------------now Reading .SRCINFO-----------------------\""
#     - "echo \"$(head -n -0 .SRCINFO)\""

#     # release a new AUR package
#     # - "git add PKGBUILD .SRCINFO"
#     # - "git commit -m \"$VERSION\""
#     # - "git push"
#   only:
#     - release